#!/usr/bin/perl 

use strict;
use warnings;
use Carp;
use File::Basename;
use LWP::UserAgent;
use JSON;
use Data::Dumper;

my $contact_email = 'btcguild+munin@heiko-reese.de';

# set default api_key here
my $api_key;

# find API key
( my $scriptbasename, undef, undef ) = fileparse($0);
if ( $scriptbasename =~ m/\w+_(\w{32})$/ ) {
    $api_key = $1;
}
else {
    croak "No API key found in filename.";
}

# get data from btcguild
my $response = get_data_offline();

# print config
if ( defined $ARGV[0] && $ARGV[0] eq 'config' ) {
    do_config();
}

sub do_config {
    print <<EOL;
multigraph pool_speed
graph_title    Pool performance
graph_category BTC
graph_vlabel   Speed

EOL

}

sub get_data_online {

    # Create a user agent object
    my $ua = LWP::UserAgent->new;
    $ua->agent(
        "BTCGuild Munin Grapher 0.1 (contact ${contact_email} for questions/abuse)"
    );

    # Create a request
    my $req = HTTP::Request->new(
        GET => 'http://www.btcguild.com/api.php?api_key=' . $api_key );

    # Pass request to the user agent and get a response back
    my $res = $ua->request($req);

    my $result;

    # Check the outcome of the response
    if ( $res->is_success ) {
        $result = $res->content;
    }
    else {
        croak "Unable to download statistics from btcguild.com.";
    }

    return from_json($result);
}

sub get_data_offline {
    return from_json(
        '{"user":{"confirmed_rewards":0.11828857,"unconfirmed_rewards":0.51518720,"estimated_rewards":0.02599966,"payouts":1.26},"workers":{"1":{"worker_name":"sprawl_mmk4","hash_rate":1498.47,"round_shares":264,"round_stales":1,"reset_shares":66766,"reset_stales":1047,"total_shares":66766,"total_stales":1047,"last_share":"0:00:03","blocks_found":0}},"pool":{"hash_rate":2816148.01,"active_workers":9209,"round_shares":502622,"round_time":"0:13:03","uswest_speed":544797.51,"useast_speed":489540.37,"uscentral_speed":259993.46,"de_speed":794635.76,"de2_speed":727180.91}}'
    );
}

# Graph: pool
print <<EOL;
EOL

foreach ( keys %{ $response->{pool} } ) {
    next unless m/_speed/;
    print <<"EOL";
$_.draw AREASTACK
$_.label $_
$_.value $response->{pool}->{$_}
EOL
}

# Graph: user
print <<EOL;

graph_title    Earnings
graph_category BTC
graph_vlabel   Bitcoin
EOL

foreach ( keys %{ $response->{user} } ) {
    next if m/payouts/;
    print <<"EOL";
$_.draw LINE1
$_.label $_
$_.value $response->{user}->{$_}
EOL
}

# Graph: Workers
print <<EOL;

graph_title    Worker Hashrate
graph_category BTC
graph_vlabel   rounds
EOL

foreach my $worker ( keys %{ $response->{workers} } ) {
    print <<"EOL";
worker_$worker.draw LINE1
worker_$worker.label $response->{workers}->{$worker}->{worker_name}
worker_$worker.value $response->{workers}->{$worker}->{hash_rate}
EOL
}

